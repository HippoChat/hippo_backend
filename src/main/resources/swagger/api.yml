# API-first development with OpenAPI
# This file will be used at compile time to generate Spring-MVC endpoint stubs using openapi-generator
openapi: '3.0.1'
info:
  title: 'backend'
  version: 0.0.1
servers:
  - url: http://localhost:8080/api
    description: Development server
  - url: https://localhost:8080/api
    description: Development server with TLS Profile
tags:
  - name: auth
    description: Authentication / authorization
  - name: user
    description: User-specific
  - name: bookmark
    description: Bookmarked dialoges
  - name: ban
    description: Blocking and reporting users
  - name: chat
    description: Messaging

paths:
  '/auth/send_verification_code':
    post:
      description: Send SMS with verification code
      operationId: Auth.SendVerificationCode
      tags:
        - auth
      security: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/VerificationCodeRequest'
      responses:
        default:
          description: OK
          content: {} # no body
  '/auth/verify_phone_code':
    post:
      description: Verify the code sent via SMS
      operationId: Auth.VerifyPhoneCode
      tags:
        - auth
      security: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/VerifyPhoneCodeRequest'
      responses:
        default:
          $ref: '#/components/responses/BasicResponse'
        '400':
          description: Verification failed
  '/auth/sign_up':
    post:
      description: Adds a new user to the system if they don’t exist yet
      operationId: Auth.SignUp
      tags:
        - auth
      security: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        default:
          $ref: '#/components/responses/SignUpResponse'
  '/auth/logout':
    parameters:
      - $ref: '#/components/parameters/UserId'
    post:
      description: Logs a user out of the system
      operationId: User.Logout
      tags:
        - auth
      responses:
        default:
          $ref: '#/components/responses/BasicResponse'

  '/user/set_image':
    post:
      description: Set profile image
      operationId: User.SetProfileImage
      tags:
        - user
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                image:
                  $ref: '#/components/schemas/Image'
              required:
                - image
      responses:
        default:
          $ref: '#/components/responses/SignUpResponse'
  '/user/{id}':
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      description: Get user info by ID
      operationId: User.GetById
      tags:
        - user
      responses:
        default:
          description: Default response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserInfoResponse'

  '/user/wait_for_partner':
    parameters:
      - $ref: '#/components/parameters/UserId'
    post:
      description: Wait for a match.
      operationId: User.WaitForPartner
      tags:
        - user
      responses:
        default:
          description: Default response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PartnerResponse'

  '/bookmark':
    get:
      description: Retrieve a list of user’s bookmarked dialogs
      operationId: User.GetBookmarks
      tags:
        - bookmark
      responses:
        default:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/BookmarksListResponse'

  '/bookmark/{id}':
    parameters:
      - $ref: '#/components/parameters/UserId'

    post:
      description: Adds a dialog with a given user to the current user’s bookmarks list.
      operationId: User.AddBookmark
      tags:
        - bookmark
      responses:
        default:
          $ref: '#/components/responses/BasicResponse'

    delete:
      description: Removes a dialog with a given user from the current user's bookmarks list.
      operationId: User.RemoveBookmark
      tags:
        - bookmark
      responses:
        default:
          $ref: '#/components/responses/BasicResponse'

  '/ban/report':
    post:
      description: Reports another user as having "bad behaviour" and adds them to the list of users blocked by the given user.
      operationId: Ban.Report
      tags:
        - ban
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ReportRequest'
      responses:
        default:
          $ref: '#/components/responses/BasicResponse'
  '/ban/blocked':
    get:
      description: Get a list of users blocked by the current user.
      operationId: Ban.GetBlocked
      tags:
        - ban
      responses:
        default:
          $ref: '#/components/schemas/BlockedUsersResponse'

  '/chat/send_message':
    post:
      description: Sends a message to another user.
      operationId: Chat.SendMessage
      tags:
        - chat
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
      responses:
        default:
          $ref: '#/components/responses/SentMessage'
  '/chat/messages':
    post:
      description: Poll for new messages in all chats. This may be a form of long polling.
      operationId: Chat.PollMessages
      tags:
        - chat
      responses:
        default:
          $ref: '#/components/schemas/MessagesResponse'

components:
  requestBodies: {}
  parameters:
    UserId:
      name: id
      in: path
      required: true
      description: ID of a user
      schema:
        $ref: '#/components/schemas/UserId'
  schemas:
    UserId:
      type: integer
    Phone:
      type: string
      description: Phone number. Stripped from any punctuation except for leading '+'.
      pattern: '\+[0-9]{7,20}'
    VerificationCode:
      type: string
      description: Verification code from SMS. 4-digits string.
      pattern: '[0-9]{4}'
    AgeGroup:
      type: string
      enum:
        - '<18'
        - '18-25'
        - '26-35'
        - '36-45'
        - '>45'
    LanguageSpec:
      type: string
      description: https://docs.oracle.com/javase/tutorial/i18n/locale/matching.html
      enum:
        - 'en-US'
        - 'ru-RU'
        - 'fr-FR'
        - 'it-IT'
        - 'es-ES'
    ResponseBase:
      type: object
      required:
        - status
      properties:
        status:
          type: integer
        error_message:
          type: string
    Image:
      description: Base64 encoded JPEG image
      type: string
      format: byte

    UserIdList:
      type: array
      items:
        $ref: '#/components/schemas/UserId'
    UserInfo:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        name:
          type: string
        age_group:
          $ref: '#/components/schemas/AgeGroup'
        language:
          $ref: '#/components/schemas/LanguageSpec'
        image:
          $ref: '#/components/schemas/Image'
      required:
        - id
        - name
        - age_group
        - language
        - image
    UserInfoSelf:
      type: object
      properties:
        public:
          $ref: '#/components/schemas/UserInfo'
        private:
          type: object
          properties:
            phone:
              $ref: '#/components/schemas/Phone'
            token:
              description: Authentication token
              type: string
          required:
            - prone
            - token
      required:
        - public
        - private

    VerificationCodeRequest:
      type: object
      properties:
        phone:
          $ref: '#/components/schemas/Phone'
      required:
        - phone
    VerifyPhoneCodeRequest:
      type: object
      properties:
        phone:
          $ref: '#/components/schemas/Phone'
        code:
          $ref: '#/components/schemas/VerificationCode'
      required:
        - phone
        - code

    SignUpRequest:
      type: object
      properties:
        phone:
          $ref: '#/components/schemas/Phone'
        code:
          $ref: '#/components/schemas/VerificationCode'
        name:
          type: string
        age_group:
          $ref: '#/components/schemas/AgeGroup'
        language:
          $ref: '#/components/schemas/LanguageSpec'
      required:
        - phone
        - code
        - name
        - age_group
        - language
    SignUpResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: integer
        error_message:
          type: string
        me:
          $ref: '#/components/schemas/UserInfoSelf'

    UsersListResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: integer
        error_message:
          type: string
        user_ids:
          $ref: '#/components/schemas/UserIdList'
    UserInfoResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: integer
        error_message:
          type: string
        user:
          $ref: '#/components/schemas/UserInfo'

    PartnerResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: integer
        error_message:
          type: string
        partner_id:
          $ref: '#/components/schemas/UserId'

    BookmarksListResponse:
      type: object
      required:
        - status
        - bookmarks
      properties:
        status:
          type: integer
        error_message:
          type: string
        bookmarks:
          type: array
          items:
            $ref: '#/components/schemas/BookmarkObject'
    BookmarkObject:
      type: object
      required:
        - user_id
      properties:
        user_id:
          $ref: '#/components/schemas/UserId'

    ReportRequest:
      type: object
      required:
        - report_reason
        - reported_id
      properties:
        report_reason:
          type: integer
        reported_id:
          type: integer
    BlockedUsersResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: integer
        error_message:
          type: string
        blocked:
          type: array
          items:
            $ref: '#/components/schemas/UserId'

    MessageId:
      description: Globally unique message ID
      type: integer
    SendMessageRequest:
      type: object
      description: |
        Message ID of `reply_to_message_id` must belong to the same chat.
        At least `message` or `image` must be non-empty.
        `image` is base64 encoded jpeg file.
      required:
        - receiver_id
      properties:
        receiver_id:
          $ref: '#/components/schemas/UserId'
        message:
          type: string
        image:
          type: string
          format: byte
        reply_to_message_id:
          $ref: '#/components/schemas/MessageId'
    SentMessage:
      type: object
      required:
        - status
      properties:
        status:
          type: integer
        error_message:
          type: string
        message_id:
          $ref: '#/components/schemas/MessageId'
    MessagesResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: integer
        error_message:
          type: string
        messages:
          $ref: '#/components/schemas/Messages'
    Messages:
      description: List of messages. Do NOT assume they come from the same chat or have specific ordering.
      type: array
      items:
        $ref: '#/components/schemas/Message'
    Message:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/MessageId'
        timestamp:
          type: string
          format: 'date-time'
        incoming:
          type: boolean
          description: Shortcut for comparing sender with current user's ID.
        sender:
          $ref: '#/components/schemas/UserId'
        receiver:
          $ref: '#/components/schemas/UserId'
        message:
          type: string
        image:
          $ref: '#/components/schemas/Image'
        reply_to_message_id:
          $ref: '#/components/schemas/MessageId'
      required:
        - id
        - timestamp
        - sender
        - receiver
        - message

  responses:
    BasicResponse:
      description: Basic response
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ResponseBase'
    SignUpResponse:
      description: User registered and automatically logged in
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/SignUpResponse'
    SentMessage:
      description: Wrapper for `SentMessage` scheme.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/SentMessage'
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes#    jwt:
security:
  - bearerAuth: []
