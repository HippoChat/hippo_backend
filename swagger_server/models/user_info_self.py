# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.user_info import UserInfo  # noqa: F401,E501
from swagger_server.models.user_info_self_private import UserInfoSelfPrivate  # noqa: F401,E501
from swagger_server import util


class UserInfoSelf(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, public: UserInfo=None, private: UserInfoSelfPrivate=None):  # noqa: E501
        """UserInfoSelf - a model defined in Swagger

        :param public: The public of this UserInfoSelf.  # noqa: E501
        :type public: UserInfo
        :param private: The private of this UserInfoSelf.  # noqa: E501
        :type private: UserInfoSelfPrivate
        """
        self.swagger_types = {
            'public': UserInfo,
            'private': UserInfoSelfPrivate
        }

        self.attribute_map = {
            'public': 'public',
            'private': 'private'
        }
        self._public = public
        self._private = private

    @classmethod
    def from_dict(cls, dikt) -> 'UserInfoSelf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserInfoSelf of this UserInfoSelf.  # noqa: E501
        :rtype: UserInfoSelf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def public(self) -> UserInfo:
        """Gets the public of this UserInfoSelf.


        :return: The public of this UserInfoSelf.
        :rtype: UserInfo
        """
        return self._public

    @public.setter
    def public(self, public: UserInfo):
        """Sets the public of this UserInfoSelf.


        :param public: The public of this UserInfoSelf.
        :type public: UserInfo
        """
        if public is None:
            raise ValueError("Invalid value for `public`, must not be `None`")  # noqa: E501

        self._public = public

    @property
    def private(self) -> UserInfoSelfPrivate:
        """Gets the private of this UserInfoSelf.


        :return: The private of this UserInfoSelf.
        :rtype: UserInfoSelfPrivate
        """
        return self._private

    @private.setter
    def private(self, private: UserInfoSelfPrivate):
        """Sets the private of this UserInfoSelf.


        :param private: The private of this UserInfoSelf.
        :type private: UserInfoSelfPrivate
        """
        if private is None:
            raise ValueError("Invalid value for `private`, must not be `None`")  # noqa: E501

        self._private = private
