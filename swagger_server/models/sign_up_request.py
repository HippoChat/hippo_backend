# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.age_group import AgeGroup  # noqa: F401,E501
from swagger_server.models.language_spec import LanguageSpec  # noqa: F401,E501
from swagger_server.models.phone import Phone  # noqa: F401,E501
from swagger_server.models.verification_code import VerificationCode  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class SignUpRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, phone: Phone=None, code: VerificationCode=None, name: str=None, age_group: AgeGroup=None, language: LanguageSpec=None):  # noqa: E501
        """SignUpRequest - a model defined in Swagger

        :param phone: The phone of this SignUpRequest.  # noqa: E501
        :type phone: Phone
        :param code: The code of this SignUpRequest.  # noqa: E501
        :type code: VerificationCode
        :param name: The name of this SignUpRequest.  # noqa: E501
        :type name: str
        :param age_group: The age_group of this SignUpRequest.  # noqa: E501
        :type age_group: AgeGroup
        :param language: The language of this SignUpRequest.  # noqa: E501
        :type language: LanguageSpec
        """
        self.swagger_types = {
            'phone': Phone,
            'code': VerificationCode,
            'name': str,
            'age_group': AgeGroup,
            'language': LanguageSpec
        }

        self.attribute_map = {
            'phone': 'phone',
            'code': 'code',
            'name': 'name',
            'age_group': 'age_group',
            'language': 'language'
        }
        self._phone = phone
        self._code = code
        self._name = name
        self._age_group = age_group
        self._language = language

    @classmethod
    def from_dict(cls, dikt) -> 'SignUpRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SignUpRequest of this SignUpRequest.  # noqa: E501
        :rtype: SignUpRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def phone(self) -> Phone:
        """Gets the phone of this SignUpRequest.


        :return: The phone of this SignUpRequest.
        :rtype: Phone
        """
        return self._phone

    @phone.setter
    def phone(self, phone: Phone):
        """Sets the phone of this SignUpRequest.


        :param phone: The phone of this SignUpRequest.
        :type phone: Phone
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    @property
    def code(self) -> VerificationCode:
        """Gets the code of this SignUpRequest.


        :return: The code of this SignUpRequest.
        :rtype: VerificationCode
        """
        return self._code

    @code.setter
    def code(self, code: VerificationCode):
        """Sets the code of this SignUpRequest.


        :param code: The code of this SignUpRequest.
        :type code: VerificationCode
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def name(self) -> str:
        """Gets the name of this SignUpRequest.


        :return: The name of this SignUpRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SignUpRequest.


        :param name: The name of this SignUpRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def age_group(self) -> AgeGroup:
        """Gets the age_group of this SignUpRequest.


        :return: The age_group of this SignUpRequest.
        :rtype: AgeGroup
        """
        return self._age_group

    @age_group.setter
    def age_group(self, age_group: AgeGroup):
        """Sets the age_group of this SignUpRequest.


        :param age_group: The age_group of this SignUpRequest.
        :type age_group: AgeGroup
        """
        if age_group is None:
            raise ValueError("Invalid value for `age_group`, must not be `None`")  # noqa: E501

        self._age_group = age_group

    @property
    def language(self) -> LanguageSpec:
        """Gets the language of this SignUpRequest.


        :return: The language of this SignUpRequest.
        :rtype: LanguageSpec
        """
        return self._language

    @language.setter
    def language(self, language: LanguageSpec):
        """Sets the language of this SignUpRequest.


        :param language: The language of this SignUpRequest.
        :type language: LanguageSpec
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501

        self._language = language
