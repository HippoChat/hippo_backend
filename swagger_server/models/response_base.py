# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ResponseBase(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, status: int=None, error_message: str=None):  # noqa: E501
        """ResponseBase - a model defined in Swagger

        :param status: The status of this ResponseBase.  # noqa: E501
        :type status: int
        :param error_message: The error_message of this ResponseBase.  # noqa: E501
        :type error_message: str
        """
        self.swagger_types = {
            'status': int,
            'error_message': str
        }

        self.attribute_map = {
            'status': 'status',
            'error_message': 'error_message'
        }
        self._status = status
        self._error_message = error_message

    @classmethod
    def from_dict(cls, dikt) -> 'ResponseBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResponseBase of this ResponseBase.  # noqa: E501
        :rtype: ResponseBase
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> int:
        """Gets the status of this ResponseBase.


        :return: The status of this ResponseBase.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status: int):
        """Sets the status of this ResponseBase.


        :param status: The status of this ResponseBase.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def error_message(self) -> str:
        """Gets the error_message of this ResponseBase.


        :return: The error_message of this ResponseBase.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message: str):
        """Sets the error_message of this ResponseBase.


        :param error_message: The error_message of this ResponseBase.
        :type error_message: str
        """

        self._error_message = error_message
