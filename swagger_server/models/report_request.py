# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.user_id import UserId  # noqa: F401,E501
from swagger_server import util


class ReportRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, report_reason: int=None, reported_user: UserId=None):  # noqa: E501
        """ReportRequest - a model defined in Swagger

        :param report_reason: The report_reason of this ReportRequest.  # noqa: E501
        :type report_reason: int
        :param reported_user: The reported_user of this ReportRequest.  # noqa: E501
        :type reported_user: UserId
        """
        self.swagger_types = {
            'report_reason': int,
            'reported_user': UserId
        }

        self.attribute_map = {
            'report_reason': 'report_reason',
            'reported_user': 'reported_user'
        }
        self._report_reason = report_reason
        self._reported_user = reported_user

    @classmethod
    def from_dict(cls, dikt) -> 'ReportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReportRequest of this ReportRequest.  # noqa: E501
        :rtype: ReportRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report_reason(self) -> int:
        """Gets the report_reason of this ReportRequest.


        :return: The report_reason of this ReportRequest.
        :rtype: int
        """
        return self._report_reason

    @report_reason.setter
    def report_reason(self, report_reason: int):
        """Sets the report_reason of this ReportRequest.


        :param report_reason: The report_reason of this ReportRequest.
        :type report_reason: int
        """
        if report_reason is None:
            raise ValueError("Invalid value for `report_reason`, must not be `None`")  # noqa: E501

        self._report_reason = report_reason

    @property
    def reported_user(self) -> UserId:
        """Gets the reported_user of this ReportRequest.


        :return: The reported_user of this ReportRequest.
        :rtype: UserId
        """
        return self._reported_user

    @reported_user.setter
    def reported_user(self, reported_user: UserId):
        """Sets the reported_user of this ReportRequest.


        :param reported_user: The reported_user of this ReportRequest.
        :type reported_user: UserId
        """
        if reported_user is None:
            raise ValueError("Invalid value for `reported_user`, must not be `None`")  # noqa: E501

        self._reported_user = reported_user
